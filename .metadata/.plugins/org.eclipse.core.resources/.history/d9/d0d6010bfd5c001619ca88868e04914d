import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * 
 * @author yzhan265
 *
 */

public class TennisMixerMatcher {
	private static /*final*/int GROUPS;
	private static /*final*/ int TEAMS;
	private static /*final*/ int TEAMSIZE;
	private static /*final*/ int GROUPSIZE;
	private static int rounds;
	private static String[][] women;
	private static String[][] men;
	private static String[][] master;
	private static int[][][] records;
	private static int[][] overAllScoreGrid;
	private static int[][] scoreGrid;
//	private static int[][] outGroup;
	private static final int TOTAL=0;
	private static final int OPPONENT=1;
	private static final int PARTNER=2;
	
	public static void main(String[] args){
		
		Logger.getGlobal().setLevel(Level.OFF);
		
//		// Test data
//		String[] womenNames = {"Annie", "Bridget" , "Caris", "Dominique", "Elizabeth","Flora"};
//		String[] menNames = {"Adam", "Bob" , "Chris", "Dylan", "Elijah", "Felix"};
//		
//		women = assignIds(womenNames, 0);
//		men = assignIds(menNames, womenNames.length);
//		
//		master = new String[women.length+men.length][2];
//		System.arraycopy(women, 0, master, 0, women.length);
//		System.arraycopy(men, 0, master, women.length, men.length);
//		Logger.getGlobal().info(Arrays.deepToString(master));
	
//		int[][][] firstGameInstance = {
//				// First group
//				{
//					// First team
//					{
//						0, 5 // Caris and Bob are a team
//					},
//					// Second team
//					{
//						1, 4
//					}
//					
//				},
//				// Second group
//				{
//					// First team
//					{
//						2, 6
//					},
//					//Second team
//					{
//						3,7
//					}
//				}
//		};
//		
//		addAllRecords(firstGameInstance);
//		
//		int testScore = assignScores();
//		Logger.getGlobal().info("TEST score:" + testScore);
//		printRecords();
//		printAScoreGrid(scoreGrid);
		
		// enter names + genders and create ids for each person.
		setUp();
		printRecords();
		printAScoreGrid(overAllScoreGrid);
		printAScoreGrid(scoreGrid);
		for (int i = 0; i < rounds; i++) {
			System.out.println("\nROUND "+(i+1)+"\nScore: " + addAllRecords(createTestInstance()));
		}
		
		printRecords();
		printAScoreGrid(overAllScoreGrid);
		printAScoreGrid(scoreGrid);
		
	}
	
	
	

	/*
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 */
	
	public static void setUp(){
		Scanner kb = new Scanner(System.in);
		System.out.println("Hi! Welcome to MixerMatcher. "
				+ "\n"
				+ "MixerMatcher will randomly assign individuals to teams within groups, based on gender "
				+ "\n"
				+ "and optimized to maximize the assigning of players with different people, minimizing play with the same people.");
		System.out.println();
		boolean error_groups = false;
		do {
			System.out.print("How many courts or groups will we be playing in today: ");
			if (kb.hasNextInt()){
				GROUPS = kb.nextInt();
				error_groups = false;
			} else {
				error_groups = true;
				kb.nextLine();
			}
		} while (error_groups);
		
		
		// TODO: configure number of teams to be optional.
		TEAMS = 2;
//		boolean error_teams = false;
//		do{
//			System.out.println("Will we be competing within our groups today (Y or N): ");
//			if (kb.next().equalsIgnoreCase("Y")){
//				TEAMS = 2;
//				kb.nextLine();
//			} else if (kb.next().equalsIgnoreCase("N")){
//				TEAMS = 1;
//			} else {
//				error_teams = true;
//			}
//		} while (error_teams);
		
		boolean error_rounds = false;
		do {
			System.out.print("How many rounds will we be playing in today: ");
			if (kb.hasNextInt()){
				rounds = kb.nextInt();
				error_rounds = false;
			} else {
				error_rounds = true;
				kb.nextLine();
			}
		} while (error_rounds);
		kb.nextLine();
		
		createNamesAndIds(kb);
		
		kb.close();
		
		// initialize all records.
		records = new int[master.length][master.length][3];
		overAllScoreGrid = new int[master.length][master.length];
		scoreGrid = new int[master.length][master.length];	
		TEAMSIZE = master.length/(GROUPS*TEAMS);
		GROUPSIZE = TEAMS*TEAMSIZE;
	}
	private static void createNamesAndIds(Scanner kb){
		String name = null;
//		Scanner kb = new Scanner(System.in);
		List<String> womenNamesAL = new ArrayList<String>();
		List<String> menNamesAL = new ArrayList<String>();
		while (true){
			System.out.println("Enter the names and genders of the players. Enter 0 to finish.");
			System.out.print("Enter a name:");
			name = kb.nextLine();
			if (name.equals("0")){
				break;
			}
			System.out.print(name+"'s gender (M or F):");
			String gender = kb.nextLine();
			if (gender.equalsIgnoreCase("M")){
				menNamesAL.add(name);
			} else if (gender.equalsIgnoreCase("F")){
				womenNamesAL.add(name);
			} else {
//				throw new InputMismatchException("Sorry, invalid input, please enter name and 'M' or 'F' for gender.");
				System.out.println("Sorry, invalid input, please enter name and 'M' or 'F' for gender.");
				continue;
			} 
		}
		
		String[] womenNames = womenNamesAL.toArray(new String[womenNamesAL.size()]);
		String[] menNames = menNamesAL.toArray(new String[menNamesAL.size()]);
		
		women = assignIds(womenNames, 0);
		men = assignIds(menNames, womenNames.length);
		
		master = new String[women.length+men.length][2];
		System.arraycopy(women, 0, master, 0, women.length);
		System.arraycopy(men, 0, master, women.length, men.length);
		System.out.println(Arrays.deepToString(master));

	}
	
	/**
	 * assigns id to names in the nameList given the starting id number.	
	 * @param nameList
	 * @param startingAssignmentNum
	 * @return
	 */
	private static String[][] assignIds (String[] nameList, int startingAssignmentNum){
		int listLength = nameList.length;
		String[][] assignedIds = randomAssignmentGenerator (startingAssignmentNum, listLength, nameList);
		return assignedIds;
	}//assignIds
	
	private static String[][] randomAssignmentGenerator (int startingAssignmentNum, int listLength, String[] nameList) {
		Integer[] randomNumList = new Integer[listLength];
		int endAssignmentNum = listLength + startingAssignmentNum;
		for (int i = startingAssignmentNum; i<endAssignmentNum; i++){
			boolean assigned = false;
			while (!assigned){
				int assignment = (int) (Math.random()*listLength);
//				Logger.getGlobal().info("Random number: "+assignment);
				if (randomNumList[assignment] == null) {
					randomNumList[assignment] = i;
					assigned = true;
				}
//				Logger.getGlobal().info(Arrays.toString(randomNumList));
			}//while
		}//for
		String[][] assigned = new String[listLength][2];
		for (int m = 0; m<listLength; m++){
			assigned[m][0] = String.valueOf(m+startingAssignmentNum);
			assigned[m][1] = nameList[randomNumList[m]-startingAssignmentNum];
//			Logger.getGlobal().info(Arrays.deepToString(assigned));
		}
//		Logger.getGlobal().info(Arrays.deepToString(assigned));
		return assigned;
	}
	
	private static int[] randomAssignmentGenerator (int startingAssignmentNum, int listLength, Integer[] inputList, Integer[] mustIncludeList) {
		Integer[] randomNumList = new Integer[listLength];
		int endAssignmentNum = listLength + startingAssignmentNum;
		for (int i = startingAssignmentNum; i<endAssignmentNum; i++){
			boolean assigned = false;
			while (!assigned){
				int assignment = (int) (Math.random()*listLength);
//				Logger.getGlobal().info("Random number: "+assignment);
				if (randomNumList[assignment] == null) {
					randomNumList[assignment] = i;
					assigned = true;
				}
//				Logger.getGlobal().info(Arrays.toString(randomNumList));
			}//while
		}//for
		
		int[] assigned = new int[listLength];
		for (int m = 0; m<listLength; m++){
			assigned[m] = inputList[randomNumList[m]-startingAssignmentNum];
//			Logger.getGlobal().info(Arrays.deepToString(assigned));
		}
//		Logger.getGlobal().info(Arrays.deepToString(assigned));
		return assigned;
	}
	
	
	/**
	 * adds the information from a game instance to the records table
	 * @param gameInstance
	 */
	public static int addAllRecords(int[][][] gameInstance){
		for (int group = 0; group<GROUPS; group++){
			for (int team = 0; team<TEAMS; team++){
				for (int teamMember = 0; teamMember < TEAMSIZE; teamMember++){
					addPlayerRecords(gameInstance[group][team][teamMember], gameInstance[group][team], team, gameInstance[group]);
				}
			}
		}

		for (int row = 0; row<records.length; row++){
			for (int column = 0; column < records[0].length; column++){
				overAllScoreGrid[row][column] = records[row][column][0];
			}
		}	
		return assignScores();
	}
	
	/**
	 * helper method for addAllRecords; adds the records from the 
	 * game instance for a single player
	 * @param player
	 * @param teamMembers
	 * @param playerTeam
	 * @param opponentTeam
	 */
	private static void addPlayerRecords(int player, int[] teamMembers, int playerTeam, int[][] opponentTeam){
//		Logger.getGlobal().info("Player: "+player+
//				", Team: "+ Arrays.toString(teamMembers) +
//				", Group: "+ Arrays.deepToString(opponentTeam)
//				);
		
		for (int i=0; i<teamMembers.length; i++){
			if (player != teamMembers[i]){
				records[player][teamMembers[i]][PARTNER]+=1;
				records[player][teamMembers[i]][TOTAL] = records[player][teamMembers[i]][OPPONENT]+ records[player][teamMembers[i]][PARTNER];
			}
		}
		
		for (int oppTeam=0; oppTeam<opponentTeam.length; oppTeam++){
			if (oppTeam != playerTeam){
				for (int opponentMember= 0; opponentMember<opponentTeam[0].length; opponentMember++){
				records[player][opponentTeam[oppTeam][opponentMember]][OPPONENT]+=1;
				records[player][opponentTeam[oppTeam][opponentMember]][TOTAL] = records[player][opponentTeam[oppTeam][opponentMember]][OPPONENT]+ records[player][opponentTeam[oppTeam][opponentMember]][PARTNER];
				}
			}

		}
	}
	
	/**
	 * Created for TESTING
	 * calculates the score for each game.
	 * @param records
	 * @return
	 */
	private static int assignTestScore (int[][] testGrid){
		int[][] scoreTestGrid= new int[testGrid.length][testGrid[0].length];
		int totalScore=0;
		int minScore = testGrid[0][0];
		for (int row = 0; row < testGrid.length; row++){
			for (int column = 0; column < testGrid[0].length; column++){
				int score = testGrid[row][column];
				if (minScore >= score){
					minScore = score;
				}
			}
		}
		
		for (int row = 0; row < testGrid.length; row++){
			for (int column = 0; column < testGrid[0].length; column++){
				scoreTestGrid[row][column] = testGrid[row][column]- minScore;
				totalScore+=scoreTestGrid[row][column];
			}
		}
		Logger.getGlobal().info("Min Score (should be 0): "+minScore);
//		printAScoreGrid(scoreTestGrid);
		return totalScore;
	}
	
	private static int assignScores (){
		scoreGrid= new int[records.length][records[0].length];
		int totalScore=0;
		int minScore = records[0][1][0];
		for (int row = 0; row < scoreGrid.length; row++){
			for (int column = 0; column < scoreGrid[0].length; column++){
				if (row != column) {
					int score = records[row][column][0];
					scoreGrid[row][column] = score;
					if (minScore >= score) {
						minScore = score;
					} 
				}
			}
		}
		
		for (int row = 0; row < scoreGrid.length; row++){
			for (int column = 0; column < scoreGrid[0].length; column++){
				if (row!= column) {
					scoreGrid[row][column] -= minScore;
					totalScore += scoreGrid[row][column];
				}
			}
		}
		Logger.getGlobal().info("Min Score (should be 0): "+minScore);
		return totalScore;
	}
	/*
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 */
		
	private static void printRecords() {
		System.out.println(Arrays.deepToString(master));
		for (int i = 0; i<records.length; i++){
			System.out.println(Arrays.deepToString(records[i])+Arrays.deepToString(master[i]));
		}
	}
	
	private static void printAScoreGrid(int[][] printableGrid) {
		for (int i = 0; i<printableGrid.length; i++){
			System.out.print(i+"  ");
		}
		
		System.out.println();

		for (int i = 0; i<printableGrid.length; i++){
			System.out.println(i+" " +Arrays.toString(printableGrid[i]));
		}
	}
	
	private static void printGrid(int[][] printableGrid){
		for (int i = 0; i<printableGrid.length; i++){
			System.out.println(Arrays.toString(printableGrid[i]));
		}
	}
	
}
